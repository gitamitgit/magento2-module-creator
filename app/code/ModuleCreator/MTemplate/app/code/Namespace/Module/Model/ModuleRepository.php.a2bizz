<?php
/**
 * Copyright Â©  All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace <Namespace>\<Module>\Model;

use <Namespace>\<Module>\Api\Data\<Module>Interface;
use <Namespace>\<Module>\Api\Data\<Module>InterfaceFactory;
use <Namespace>\<Module>\Api\Data\<Module>SearchResultsInterfaceFactory;
use <Namespace>\<Module>\Api\<Module>RepositoryInterface;
use <Namespace>\<Module>\Model\ResourceModel\<Module> as Resource<Module>;
use <Namespace>\<Module>\Model\ResourceModel\<Module>\CollectionFactory as <Module>CollectionFactory;
use Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface;
use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\NoSuchEntityException;

class <Module>Repository implements <Module>RepositoryInterface
{

    /**
     * @var <Module>CollectionFactory
     */
    protected $<module>CollectionFactory;

    /**
     * @var <Module>
     */
    protected $searchResultsFactory;

    /**
     * @var CollectionProcessorInterface
     */
    protected $collectionProcessor;

    /**
     * @var Resource<Module>
     */
    protected $resource;

    /**
     * @var <Module>InterfaceFactory
     */
    protected $<module>Factory;


    /**
     * @param Resource<Module> $resource
     * @param <Module>InterfaceFactory $<module>Factory
     * @param <Module>CollectionFactory $<module>CollectionFactory
     * @param <Module>SearchResultsInterfaceFactory $searchResultsFactory
     * @param CollectionProcessorInterface $collectionProcessor
     */
    public function __construct(
        Resource<Module> $resource,
        <Module>InterfaceFactory $<module>Factory,
        <Module>CollectionFactory $<module>CollectionFactory,
        <Module>SearchResultsInterfaceFactory $searchResultsFactory,
        CollectionProcessorInterface $collectionProcessor
    ) {
        $this->resource = $resource;
        $this-><module>Factory = $<module>Factory;
        $this-><module>CollectionFactory = $<module>CollectionFactory;
        $this->searchResultsFactory = $searchResultsFactory;
        $this->collectionProcessor = $collectionProcessor;
    }

    /**
     * @inheritDoc
     */
    public function save(<Module>Interface $<module>)
    {
        try {
            $this->resource->save($<module>);
        } catch (\Exception $exception) {
            throw new CouldNotSaveException(__(
                'Could not save the <module>: %1',
                $exception->getMessage()
            ));
        }
        return $<module>;
    }

    /**
     * @inheritDoc
     */
    public function get($<module>Id)
    {
        $<module> = $this-><module>Factory->create();
        $this->resource->load($<module>, $<module>Id);
        if (!$<module>->getId()) {
            throw new NoSuchEntityException(__('<Module> with id "%1" does not exist.', $<module>Id));
        }
        return $<module>;
    }

    /**
     * @inheritDoc
     */
    public function getList(
        \Magento\Framework\Api\SearchCriteriaInterface $criteria
    ) {
        $collection = $this-><module>CollectionFactory->create();
        
        $this->collectionProcessor->process($criteria, $collection);
        
        $searchResults = $this->searchResultsFactory->create();
        $searchResults->setSearchCriteria($criteria);
        
        $items = [];
        foreach ($collection as $model) {
            $items[] = $model;
        }
        
        $searchResults->setItems($items);
        $searchResults->setTotalCount($collection->getSize());
        return $searchResults;
    }

    /**
     * @inheritDoc
     */
    public function delete(<Module>Interface $<module>)
    {
        try {
            $<module>Model = $this-><module>Factory->create();
            $this->resource->load($<module>Model, $<module>->get<Module>Id());
            $this->resource->delete($<module>Model);
        } catch (\Exception $exception) {
            throw new CouldNotDeleteException(__(
                'Could not delete the <Module>: %1',
                $exception->getMessage()
            ));
        }
        return true;
    }

    /**
     * @inheritDoc
     */
    public function deleteById($<module>Id)
    {
        return $this->delete($this->get($<module>Id));
    }
}

