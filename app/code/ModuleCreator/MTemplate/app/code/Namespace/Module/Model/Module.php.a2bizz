<?php
/**
 * Copyright Â©  All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace <Namespace>\<Module>\Model;

use <Namespace>\<Module>\Api\Data\<Module>Interface;
use Magento\Framework\Model\AbstractModel;

class <Module> extends AbstractModel implements <Module>Interface
{
	
	const STATUS_ENABLED = 1;
    const STATUS_DISABLED = 0;

    /**
     * @inheritDoc
     */
    public function _construct()
    {
        $this->_init(\<Namespace>\<Module>\Model\ResourceModel\<Module>::class);
    }
    
    public function __construct(
        \Magento\Framework\Model\Context $context,
        \Magento\Framework\Registry $registry,
        \<Namespace>\<Module>\Model\ImageUploader $imageUploader
    ){
        $this->imageUploader = $imageUploader;
        
        parent::__construct($context,$registry);
    }

    /**
     * @inheritDoc
     */
    public function get<Module>Id()
    {
        return $this->getData(self::ID);
    }

    /**
     * @inheritDoc
     */
    public function set<Module>Id($<module>Id)
    {
        return $this->setData(self::ID, $<module>Id);
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->getData(self::TITLE);
    }

    /**
     * @inheritDoc
     */
    public function setTitle($title)
    {
        return $this->setData(self::TITLE, $title);
    }

    /**
     * @inheritDoc
     */
    public function getContent()
    {
        return $this->getData(self::CONTENT);
    }

    /**
     * @inheritDoc
     */
    public function setContent($content)
    {
        return $this->setData(self::CONTENT, $content);
    }

    /**
     * @inheritDoc
     */
    public function getCreationTime()
    {
        return $this->getData(self::CREATION_TIME);
    }

    /**
     * @inheritDoc
     */
    public function setCreationTime($creationTime)
    {
        return $this->setData(self::CREATION_TIME, $creationTime);
    }

    /**
     * @inheritDoc
     */
    public function getUpdateTime()
    {
        return $this->getData(self::UPDATE_TIME);
    }

    /**
     * @inheritDoc
     */
    public function setUpdateTime($updateTime)
    {
        return $this->setData(self::UPDATE_TIME, $updateTime);
    }

    /**
     * @inheritDoc
     */
    public function getIsActive()
    {
        return $this->getData(self::IS_ACTIVE);
    }

    /**
     * @inheritDoc
     */
    public function setIsActive($isActive)
    {
        return $this->setData(self::IS_ACTIVE, $isActive);
    }
    
    /**
     * Prepare statuses, available event module_creator_get_available_statuses to customize statuses.
     *
     * @return array
     */
    public function getAvailableStatuses()
    {
        return [self::STATUS_ENABLED => __('Enabled'), self::STATUS_DISABLED => __('Disabled')];
    }
    
    //Before saving data we must save images 
    //Here all process is done for 
    public function beforeSave(){
        parent::beforeSave();
        
        $data = $this->getData();
        
        //When Gallery image is uploaded        
        if( isset($data['image'][0]['name']) && $data['image'][0]['previewType']=='image' ):
            $baseTmpPath = $this->getBaseTmpPath($data);
            $this->imageUploader->setBaseTmpPath($baseTmpPath);
            
            //Uplaod image from tmp directory to real directory
            $imageName = $this->imageUploader->moveFileFromTmp($data['image'][0]['name'], true);
            $data['image'] = '/media/'.$imageName;
        else:
            if(!isset($data['image'])):
                $data['image']='';
            else:
                unset($data['image']);
            endif;            
        endif;
        
        $this->setData($data);

        return $this;
    }

    // get base image path when getting image from gallery 
    // for upload temp path we have set it statically in Upload Controller
    public function getBaseTmpPath($data){        
        $baseTmpPath = dirname($data['image'][0]['url']);
        $new = explode('media',$baseTmpPath);

        return $new[1];
    }
}

